diff --git a/src/Cedar/Admin.c b/src/Cedar/Admin.c
index 3b0ab15..6f12a1c 100644
--- a/src/Cedar/Admin.c
+++ b/src/Cedar/Admin.c
@@ -1053,8 +1053,8 @@ UINT StMakeOpenVpnConfigFile(ADMIN *a, RPC_READ_LOG_FILE *t)
 	UINT ret = ERR_NO_ERROR;
 	ZIP_PACKER *p;
 	FIFO *f;
-	BUF *readme_buf;
-	BUF *readme_pdf_buf;
+//	BUF *readme_buf;
+//	BUF *readme_pdf_buf;
 	BUF *sample_buf;
 	OPENVPN_SSTP_CONFIG config;
 	LIST *port_list;
@@ -1081,11 +1081,11 @@ UINT StMakeOpenVpnConfigFile(ADMIN *a, RPC_READ_LOG_FILE *t)
 
 	p = NewZipPacker();
 
-	// readme.txt
-	readme_buf = ReadDump("|openvpn_readme.txt");
-
-	// readme.pdf
-	readme_pdf_buf = ReadDump("|openvpn_readme.pdf");
+//	// readme.txt
+//	readme_buf = ReadDump("|openvpn_readme.txt");
+//
+//	// readme.pdf
+//	readme_pdf_buf = ReadDump("|openvpn_readme.pdf");
 
 	// sample.ovpn
 	sample_buf = ReadDump("|openvpn_sample.ovpn");
@@ -1094,7 +1094,8 @@ UINT StMakeOpenVpnConfigFile(ADMIN *a, RPC_READ_LOG_FILE *t)
 	GetMachineHostName(my_hostname, sizeof(my_hostname));
 	my_hostname[16] = 0;
 
-	if (readme_buf == NULL || sample_buf == NULL || readme_pdf_buf == NULL)
+//	if (readme_buf == NULL || sample_buf == NULL || readme_pdf_buf == NULL)
+	if (sample_buf == NULL)
 	{
 		ret = ERR_INTERNAL_ERROR;
 	}
@@ -1279,8 +1280,8 @@ UINT StMakeOpenVpnConfigFile(ADMIN *a, RPC_READ_LOG_FILE *t)
 			StrLower(my_hostname);
 		}
 
-		ZipAddFileSimple(p, "readme.txt", LocalTime64(), 0, readme_buf->Buf, readme_buf->Size);
-		ZipAddFileSimple(p, "readme.pdf", LocalTime64(), 0, readme_pdf_buf->Buf, readme_pdf_buf->Size);
+//		ZipAddFileSimple(p, "readme.txt", LocalTime64(), 0, readme_buf->Buf, readme_buf->Size);
+//		ZipAddFileSimple(p, "readme.pdf", LocalTime64(), 0, readme_pdf_buf->Buf, readme_pdf_buf->Size);
 
 		ReplaceStrEx((char *)config_l3_buf->Buf, config_l3_buf->Size, (char *)config_l3_buf->Buf,
 			"$TAG_TUN_TAP$", "tun", false);
@@ -1358,9 +1359,9 @@ UINT StMakeOpenVpnConfigFile(ADMIN *a, RPC_READ_LOG_FILE *t)
 			SeekBuf(t->Buffer, 0, 0);
 		}
 
-		FreeBuf(readme_buf);
+//		FreeBuf(readme_buf);
 		FreeBuf(sample_buf);
-		FreeBuf(readme_pdf_buf);
+//		FreeBuf(readme_pdf_buf);
 		FreeBuf(x_buf);
 
 		FreeX(dummy_x);
diff --git a/src/Cedar/Cedar.c b/src/Cedar/Cedar.c
index 00ff67e..6477c83 100644
--- a/src/Cedar/Cedar.c
+++ b/src/Cedar/Cedar.c
@@ -1336,7 +1336,7 @@ void CleanupCedar(CEDAR *c)
 		return;
 	}
 
-	WuFreeWebUI(c->WebUI);
+//	WuFreeWebUI(c->WebUI);
 	FreeCedarLayer3(c);
 
 /*
@@ -1762,7 +1762,7 @@ CEDAR *NewCedar(X *server_x, K *server_k)
 
 	InitCedarLayer3(c);
 
-	c->WebUI = WuNewWebUI(c);
+//	c->WebUI = WuNewWebUI(c);
 
 #ifdef	ALPHA_VERSION
 	beta_str = "Alpha";
diff --git a/src/Cedar/Cedar.h b/src/Cedar/Cedar.h
index 159238c..b8f7e54 100644
--- a/src/Cedar/Cedar.h
+++ b/src/Cedar/Cedar.h
@@ -1033,7 +1033,7 @@ typedef struct CEDAR
 	COUNTER *AssignedBridgeLicense;	// Number of assigned bridge licenses
 	UINT64 LicenseViolationTick;	// License violation occurs
 	LIST *NonSslList;				// Non-SSL connection list
-	struct WEBUI *WebUI;			// Data for WebUI service
+//	struct WEBUI *WebUI;			// Data for WebUI service
 	UINT Beta;						// Beta number
 	LOCK *CedarSuperLock;			// Cedar super lock!
 	bool DisableIPv6Listener;		// Disable IPv6 listener
@@ -1156,8 +1156,8 @@ typedef struct CEDAR
 // User-mode Router
 #include <Cedar/Nat.h>
 
-// Web UI
-#include <Cedar/WebUI.h>
+//// Web UI
+//#include <Cedar/WebUI.h>
 
 // VPN Gate Plugin DLL
 #include <VGate/VGateCommon.h>
diff --git a/src/Cedar/Protocol.c b/src/Cedar/Protocol.c
index b806213..3c7f2de 100644
--- a/src/Cedar/Protocol.c
+++ b/src/Cedar/Protocol.c
@@ -6291,22 +6291,22 @@ bool ServerDownloadSignature(CONNECTION *c, char **error_detail_str)
 				{
 					bool b = false;
 
-					// Show the WebUI if the configuration allow to use the WebUI
-					if (c->Cedar->Server != NULL && c->Cedar->Server->UseWebUI)
-					{
-						WU_WEBPAGE *page;
-
-						// Show the WebUI
-						page = WuGetPage(h->Target, c->Cedar->WebUI);
-
-						if (page != NULL)
-						{
-							PostHttp(s, page->header, page->data, page->size);
-							b = true;
-							WuFreeWebPage(page);
-						}
-
-					}
+//					// Show the WebUI if the configuration allow to use the WebUI
+//					if (c->Cedar->Server != NULL && c->Cedar->Server->UseWebUI)
+//					{
+//						WU_WEBPAGE *page;
+//
+//						// Show the WebUI
+//						page = WuGetPage(h->Target, c->Cedar->WebUI);
+//
+//						if (page != NULL)
+//						{
+//							PostHttp(s, page->header, page->data, page->size);
+//							b = true;
+//							WuFreeWebPage(page);
+//						}
+//
+//					}
 
 					if (c->FirstSock->RemoteIP.addr[0] == 127)
 					{
diff --git a/src/Cedar/Server.c b/src/Cedar/Server.c
index 52be8a8..cd17684 100644
--- a/src/Cedar/Server.c
+++ b/src/Cedar/Server.c
@@ -5923,12 +5923,12 @@ void SiLoadServerCfg(SERVER *s, FOLDER *f)
 		SetEraserCheckInterval(CfgGetInt(f, "AutoDeleteCheckIntervalSecs"));
 		s->Eraser = NewEraser(s->Logger, CfgGetInt64(f, "AutoDeleteCheckDiskFreeSpaceMin"));
 
-		// WebUI
-		s->UseWebUI = CfgGetBool(f, "UseWebUI");
+//		// WebUI
+//		s->UseWebUI = CfgGetBool(f, "UseWebUI");
 
 
-		// WebTimePage
-		s->UseWebTimePage = CfgGetBool(f, "UseWebTimePage");
+//		// WebTimePage
+//		s->UseWebTimePage = CfgGetBool(f, "UseWebTimePage");
 
 		// NoLinuxArpFilter
 		s->NoLinuxArpFilter = CfgGetBool(f, "NoLinuxArpFilter");
@@ -6323,8 +6323,8 @@ void SiWriteServerCfg(FOLDER *f, SERVER *s)
 		CfgAddInt64(f, "AutoDeleteCheckDiskFreeSpaceMin", s->Eraser->MinFreeSpace);
 		CfgAddInt(f, "AutoDeleteCheckIntervalSecs", GetEraserCheckInterval());
 
-		// WebUI
-		CfgAddBool(f, "UseWebUI", s->UseWebUI);
+//		// WebUI
+//		CfgAddBool(f, "UseWebUI", s->UseWebUI);
 
 
 		// NoLinuxArpFilter
@@ -6378,8 +6378,8 @@ void SiWriteServerCfg(FOLDER *f, SERVER *s)
 			CfgAddStr(f, "OpenVPN_UdpPortList", config.OpenVPNPortList);
 		}
 
-		// WebTimePage
-		CfgAddBool(f, "UseWebTimePage", s->UseWebTimePage);
+//		// WebTimePage
+//		CfgAddBool(f, "UseWebTimePage", s->UseWebTimePage);
 
 		// Debug log
 		CfgAddBool(f, "SaveDebugLog", s->SaveDebugLog);
diff --git a/src/Cedar/Server.h b/src/Cedar/Server.h
index faf9b63..365958f 100644
--- a/src/Cedar/Server.h
+++ b/src/Cedar/Server.h
@@ -279,10 +279,10 @@ struct SERVER
 	UCHAR MyRandomKey[SHA1_SIZE];		// Their own random key
 	bool FarmControllerInited;			// Initialization of farm controller has been completed
 	bool DisableDeadLockCheck;			// Disable the deadlock check
-	bool UseWebUI;						// Use the WebUI
+//	bool UseWebUI;						// Use the WebUI
 	bool SaveDebugLog;					// Save the debug log
 	bool NoSendSignature;				// Let the client not to send a signature
-	bool UseWebTimePage;				// Use WebTimePage
+//	bool UseWebTimePage;				// Use WebTimePage
 	bool NoLinuxArpFilter;				// Not to set arp_filter in Linux
 	bool NoHighPriorityProcess;			// Not to raise the priority of the process
 	bool NoDebugDump;					// Not to output the debug dump
diff --git a/src/Cedar/VG.h b/src/Cedar/VG.h
index 9595eee..eba559e 100644
--- a/src/Cedar/VG.h
+++ b/src/Cedar/VG.h
@@ -117,9 +117,9 @@
 #define	VG_HUBNAME			"VPNGATE"
 
 
-bool InitVg();
-void FreeVg();
-void VgUseStaticLink();
+//bool InitVg();
+//void FreeVg();
+//void VgUseStaticLink();
 
 #endif	// VG_H
 
diff --git a/src/Mayaqua/FileIO.c b/src/Mayaqua/FileIO.c
index 49fbec9..5e728fb 100644
--- a/src/Mayaqua/FileIO.c
+++ b/src/Mayaqua/FileIO.c
@@ -1315,7 +1315,8 @@ void BuildHamcore(char *dst_filename, char *src_dir, bool unix_only)
 					c->Size = b->Size;
 					tmp_size = CalcCompress(c->Size);
 					tmp = Malloc(tmp_size);
-					c->SizeCompressed = Compress(tmp, tmp_size, b->Buf, b->Size);
+//					c->SizeCompressed = Compress(tmp, tmp_size, b->Buf, b->Size);
+					c->SizeCompressed = CompressEx(tmp, tmp_size, b->Buf, b->Size, 9);
 					c->Buffer = tmp;
 					Insert(o, c);
 					Print("%s: %u -> %u\n", s, c->Size, c->SizeCompressed);
diff --git a/src/Mayaqua/Internat.c b/src/Mayaqua/Internat.c
index 73e5a52..41ea987 100644
--- a/src/Mayaqua/Internat.c
+++ b/src/Mayaqua/Internat.c
@@ -924,32 +924,32 @@ USHORT *WideToUtf16(wchar_t *str)
 void InitInternational()
 {
 #ifdef	OS_UNIX
-	void *d;
+//	void *d;
 
 	if (iconv_lock != NULL)
 	{
 		return;
 	}
 
-	GetCurrentCharSet(charset, sizeof(charset));
-	d = IconvWideToStrInternal();
-	if (d == (void *)-1)
-	{
-		StrCpy(charset, sizeof(charset), "utf-8");
-		d = IconvWideToStrInternal();
-		if (d == (void *)-1)
-		{
-			StrCpy(charset, sizeof(charset), "US");
-		}
-		else
-		{
-			IconvFreeInternal(d);
-		}
-	}
-	else
-	{
-		IconvFreeInternal(d);
-	}
+//	GetCurrentCharSet(charset, sizeof(charset));
+//	d = IconvWideToStrInternal();
+//	if (d == (void *)-1)
+//	{
+//		StrCpy(charset, sizeof(charset), "utf-8");
+//		d = IconvWideToStrInternal();
+//		if (d == (void *)-1)
+//		{
+//			StrCpy(charset, sizeof(charset), "US");
+//		}
+//		else
+//		{
+//			IconvFreeInternal(d);
+//		}
+//	}
+//	else
+//	{
+//		IconvFreeInternal(d);
+//	}
 
 	iconv_lock = NewLockMain();
 
@@ -1120,12 +1120,12 @@ void *IconvStrToWideInternal()
 	return (void *)iconv_open(IsBigEndian() ? "UTF-16BE" : "UTF-16LE", charset);
 }
 
-// Close the handle
-int IconvFreeInternal(void *d)
-{
-	iconv_close((iconv_t)d);
-	return 0;
-}
+//// Close the handle
+//int IconvFreeInternal(void *d)
+//{
+//	iconv_close((iconv_t)d);
+//	return 0;
+//}
 
 void *IconvWideToStr()
 {
@@ -1158,49 +1158,49 @@ int IconvFree(void *d)
 	return 0;
 }
 
-// Get the character set that is currently used from the environment variable
-void GetCurrentCharSet(char *name, UINT size)
-{
-	char tmp[MAX_SIZE];
-	TOKEN_LIST *t;
-	// Validate arguments
-	if (name == NULL)
-	{
-		return;
-	}
-
-	Zero(tmp, sizeof(tmp));
-	if (GetEnv("LANG", tmp, sizeof(tmp)) == false || IsEmptyStr(tmp))
-	{
-		Zero(tmp, sizeof(tmp));
-		if (GetEnv("LOCATION", tmp, sizeof(tmp)) == false || IsEmptyStr(tmp))
-		{
-			StrCpy(tmp, sizeof(tmp), "C");
-		}
-	}
-
-	Trim(tmp);
-
-	t = ParseToken(tmp, ".");
-	if (t->NumTokens >= 2)
-	{
-		StrCpy(name, size, t->Token[1]);
-	}
-	else
-	{
-		if (t->NumTokens == 1)
-		{
-			StrCpy(name, size, t->Token[0]);
-		}
-		else
-		{
-			StrCpy(name, size, "UTF-8");
-		}
-	}
-	FreeToken(t);
-
-	StrUpper(name);
-}
+//// Get the character set that is currently used from the environment variable
+//void GetCurrentCharSet(char *name, UINT size)
+//{
+//	char tmp[MAX_SIZE];
+//	TOKEN_LIST *t;
+//	// Validate arguments
+//	if (name == NULL)
+//	{
+//		return;
+//	}
+//
+//	Zero(tmp, sizeof(tmp));
+//	if (GetEnv("LANG", tmp, sizeof(tmp)) == false || IsEmptyStr(tmp))
+//	{
+//		Zero(tmp, sizeof(tmp));
+//		if (GetEnv("LOCATION", tmp, sizeof(tmp)) == false || IsEmptyStr(tmp))
+//		{
+//			StrCpy(tmp, sizeof(tmp), "C");
+//		}
+//	}
+//
+//	Trim(tmp);
+//
+//	t = ParseToken(tmp, ".");
+//	if (t->NumTokens >= 2)
+//	{
+//		StrCpy(name, size, t->Token[1]);
+//	}
+//	else
+//	{
+//		if (t->NumTokens == 1)
+//		{
+//			StrCpy(name, size, t->Token[0]);
+//		}
+//		else
+//		{
+//			StrCpy(name, size, "UTF-8");
+//		}
+//	}
+//	FreeToken(t);
+//
+//	StrUpper(name);
+//}
 
 #endif	// OS_UNIX
 
diff --git a/src/Mayaqua/Internat.h b/src/Mayaqua/Internat.h
index 4f2383e..98357ed 100644
--- a/src/Mayaqua/Internat.h
+++ b/src/Mayaqua/Internat.h
@@ -235,7 +235,7 @@ bool UniInChar(wchar_t *string, wchar_t c);
 UNI_TOKEN_LIST *UniGetLines(wchar_t *str);
 
 #ifdef	OS_UNIX
-void GetCurrentCharSet(char *name, UINT size);
+//void GetCurrentCharSet(char *name, UINT size);
 UINT UnixCalcStrToUni(char *str);
 UINT UnixStrToUni(wchar_t *s, UINT size, char *str);
 UINT UnixCalcUniToStr(wchar_t *s);
@@ -245,7 +245,7 @@ void *IconvStrToWide();
 int IconvFree(void *d);
 void *IconvWideToStrInternal();
 void *IconvStrToWideInternal();
-int IconvFreeInternal(void *d);
+//int IconvFreeInternal(void *d);
 #endif	// OS_UNIX
 
 #endif	// INTERNAT_H
diff --git a/src/Mayaqua/Kernel.c b/src/Mayaqua/Kernel.c
index 94c2a62..d8eacfb 100644
--- a/src/Mayaqua/Kernel.c
+++ b/src/Mayaqua/Kernel.c
@@ -1378,10 +1378,10 @@ void GetTimeStrEx(wchar_t *str, UINT size, SYSTEMTIME *st, LOCALE *locale)
 		return;
 	}
 
-	if (_GETLANG() == SE_LANG_JAPANESE || _GETLANG() == SE_LANG_CHINESE_ZH)
-	{
-		tag = L"%2u%s%2u%s%2u%s";
-	}
+//	if (_GETLANG() == SE_LANG_JAPANESE || _GETLANG() == SE_LANG_CHINESE_ZH)
+//	{
+//		tag = L"%2u%s%2u%s%2u%s";
+//	}
 
 	locale = (locale != NULL ? locale : &current_locale);
 	UniFormat(str, size,
@@ -1401,10 +1401,10 @@ void GetDateStrEx(wchar_t *str, UINT size, SYSTEMTIME *st, LOCALE *locale)
 		return;
 	}
 
-	if (_GETLANG() == SE_LANG_JAPANESE || _GETLANG() == SE_LANG_CHINESE_ZH)
-	{
-		tag = L"%4u%s%2u%s%2u%s(%s)";
-	}
+//	if (_GETLANG() == SE_LANG_JAPANESE || _GETLANG() == SE_LANG_CHINESE_ZH)
+//	{
+//		tag = L"%4u%s%2u%s%2u%s(%s)";
+//	}
 
 	locale = (locale != NULL ? locale : &current_locale);
 	UniFormat(str, size,
diff --git a/src/Mayaqua/Table.c b/src/Mayaqua/Table.c
index 0b22766..aeb09fc 100644
--- a/src/Mayaqua/Table.c
+++ b/src/Mayaqua/Table.c
@@ -125,16 +125,16 @@
 // List of TABLE
 static LIST *TableList = NULL;
 static wchar_t old_table_name[MAX_SIZE] = {0};		// Old table name
-static LANGLIST current_lang = {0};
-static LANGLIST current_os_lang = {0};
+//static LANGLIST current_lang = {0};
+//static LANGLIST current_os_lang = {0};
 
 // Initialization of string table routine
 void InitTable()
 {
-	LIST *o;
-	char tmp[MAX_SIZE];
-	LANGLIST *e = NULL;
-	LANGLIST *os_lang = NULL;
+//	LIST *o;
+//	char tmp[MAX_SIZE];
+//	LANGLIST *e = NULL;
+//	LANGLIST *os_lang = NULL;
 	char table_name[MAX_SIZE];
 	if (MayaquaIsMinimalMode())
 	{
@@ -142,518 +142,153 @@ void InitTable()
 		return;
 	}
 
-	o = LoadLangList();
-	if (o == NULL)
-	{
-LABEL_FATAL_ERROR:
-		Alert("Fatal Error: The file \"hamcore.se2\" is missing or broken.\r\nPlease check hamcore.se2.\r\n\r\n(First, reboot the computer. If this problem occurs again, please reinstall VPN software files.)", NULL);
-		exit(-1);
-		return;
-	}
-
-	// Read the lang.config
-	if (LoadLangConfigCurrentDir(tmp, sizeof(tmp)))
-	{
-		e = GetBestLangByName(o, tmp);
-	}
-
-	os_lang = GetBestLangForCurrentEnvironment(o);
-
-	if (e == NULL)
-	{
-		e = os_lang;
-	}
-
-	if (e == NULL)
-	{
-		goto LABEL_FATAL_ERROR;
-	}
-
-	SaveLangConfigCurrentDir(e->Name);
-
-	Copy(&current_lang, e, sizeof(LANGLIST));
-	Copy(&current_os_lang, os_lang, sizeof(LANGLIST));
-
-	current_lang.LangList = current_lang.LcidList = NULL;
-	current_os_lang.LangList = current_os_lang.LcidList = NULL;
+//	o = LoadLangList();
+//	if (o == NULL)
+//	{
+//LABEL_FATAL_ERROR:
+//		Alert("Fatal Error: The file \"hamcore.se2\" is missing or broken.\r\nPlease check hamcore.se2.\r\n\r\n(First, reboot the computer. If this problem occurs again, please reinstall VPN software files.)", NULL);
+//		exit(-1);
+//		return;
+//	}
+//
+//	// Read the lang.config
+//	if (LoadLangConfigCurrentDir(tmp, sizeof(tmp)))
+//	{
+//		e = GetBestLangByName(o, tmp);
+//	}
+//
+//	os_lang = GetBestLangForCurrentEnvironment(o);
+//
+//	if (e == NULL)
+//	{
+//		e = os_lang;
+//	}
+//
+//	if (e == NULL)
+//	{
+//		goto LABEL_FATAL_ERROR;
+//	}
+//
+//	SaveLangConfigCurrentDir(e->Name);
+//
+//	Copy(&current_lang, e, sizeof(LANGLIST));
+//	Copy(&current_os_lang, os_lang, sizeof(LANGLIST));
+//
+//	current_lang.LangList = current_lang.LcidList = NULL;
+//	current_os_lang.LangList = current_os_lang.LcidList = NULL;
 
 	// Read the corresponding string table
-	Format(table_name, sizeof(table_name), "|strtable_%s.stb", current_lang.Name);
+//	Format(table_name, sizeof(table_name), "|strtable_%s.stb", current_lang.Name);
+	Format(table_name, sizeof(table_name), "|strtable_en.stb");
 	if (LoadTable(table_name) == false)
 	{
-		goto LABEL_FATAL_ERROR;
-	}
-
-	FreeLangList(o);
-}
-
-// Get the language of the current OS
-void GetCurrentOsLang(LANGLIST *e)
-{
-	// Validate arguments
-	if (e == NULL)
-	{
-		return;
-	}
-
-	Copy(e, &current_os_lang, sizeof(LANGLIST));
-}
-
-// Get the language ID of the current OS
-UINT GetCurrentOsLangId()
-{
-	LANGLIST e;
-
-	Zero(&e, sizeof(e));
-
-	GetCurrentOsLang(&e);
-
-	return e.Id;
-}
-
-// Get the current language
-void GetCurrentLang(LANGLIST *e)
-{
-	// Validate arguments
-	if (e == NULL)
-	{
-		return;
-	}
-
-	Copy(e, &current_lang, sizeof(LANGLIST));
-}
-
-// Get the current language ID
-UINT GetCurrentLangId()
-{
-	LANGLIST e;
-
-	Zero(&e, sizeof(e));
-
-	GetCurrentLang(&e);
-
-	return e.Id;
-}
-
-// Write to the lang.config file in the current directory
-bool SaveLangConfigCurrentDir(char *str)
-{
-	// Validate arguments
-	if (str == NULL)
-	{
-		return false;
-	}
-
-	return SaveLangConfig(LANG_CONFIG_FILENAME, str);
-}
-
-// Write to the lang.config file
-bool SaveLangConfig(wchar_t *filename, char *str)
-{
-	BUF *b;
-	LIST *o;
-	UINT i;
-	bool ret;
-	// Validate arguments
-	if (filename == NULL)
-	{
-		return false;
-	}
-
-	// Read the template
-	b = ReadDump(LANG_CONFIG_TEMPLETE);
-	if (b == NULL)
-	{
-		return false;
-	}
-
-	SeekBuf(b, b->Size, 0);
-
-	o = LoadLangList();
-	if (o != NULL)
-	{
-		wchar_t tmp[MAX_SIZE];
-
-		AppendBufStr(b, "# Available Language IDs are:\r\n");
-
-		for (i = 0;i < LIST_NUM(o);i++)
-		{
-			LANGLIST *e = LIST_DATA(o, i);
-
-			UniFormat(tmp, sizeof(tmp), L"#  %S: %s (%s)\r\n",
-				e->Name, e->TitleEnglish, e->TitleLocal);
-
-			AppendBufUtf8(b, tmp);
-		}
-
-		AppendBufStr(b, "\r\n\r\n# Specify a Language ID here.\r\n");
-		AppendBufStr(b, str);
-		AppendBufStr(b, "\r\n\r\n");
-
-		FreeLangList(o);
-	}
-
-	ret = DumpBufWIfNecessary(b, filename);
-
-	FreeBuf(b);
-
-	return ret;
-}
-
-// Read the lang.config file in the current directory
-bool LoadLangConfigCurrentDir(char *str, UINT str_size)
-{
-	// Validate arguments
-	if (str == NULL)
-	{
-		return false;
-	}
-
-	return LoadLangConfig(LANG_CONFIG_FILENAME, str, str_size);
-}
-
-// Read the lang.config file
-bool LoadLangConfig(wchar_t *filename, char *str, UINT str_size)
-{
-	BUF *b;
-	bool ret = false;
-	// Validate arguments
-	if (filename == NULL || str == NULL)
-	{
-		return false;
-	}
-
-	b = ReadDumpW(filename);
-	if (b == NULL)
-	{
-		return false;
-	}
-
-	while (true)
-	{
-		char *line = CfgReadNextLine(b);
-
-		if (line == NULL)
-		{
-			break;
-		}
-
-		Trim(line);
-
-		if (IsEmptyStr(line) == false)
-		{
-			if (StartWith(line, "#") == false && StartWith(line, "//") == false && StartWith(line, ";") == false &&
-				InStr(line, "#") == false)
-			{
-				StrCpy(str, str_size, line);
-				ret = true;
-			}
-		}
-
-		Free(line);
-	}
-
-	FreeBuf(b);
-
-	return ret;
-}
-
-// Choose the language from the ID
-LANGLIST *GetLangById(LIST *o, UINT id)
-{
-	UINT i;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (e->Id == id)
-		{
-			return e;
-		}
-	}
-
-	return NULL;
-}
-
-// Choice the best language for the current environment
-LANGLIST *GetBestLangForCurrentEnvironment(LIST *o)
-{
-	LANGLIST *ret = NULL;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-#ifdef	OS_WIN32
-	ret = GetBestLangByLcid(o, MsGetUserLocaleId());
-#else	// OS_WIN32
-	if (true)
-	{
-		char lang[MAX_SIZE];
-
-		if (GetEnv("LANG", lang, sizeof(lang)))
-		{
-			ret = GetBestLangByLangStr(o, lang);
-		}
-		else
-		{
-			ret = GetBestLangByLangStr(o, "C");
-		}
-	}
-#endif	// OS_WIN32
-
-	return ret;
-}
-
-// Search for the best language from LANG string of UNIX
-LANGLIST *GetBestLangByLangStr(LIST *o, char *str)
-{
-	UINT i;
-	LANGLIST *ret;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
+//		goto LABEL_FATAL_ERROR;
 
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-		UINT j;
+//	FreeLangList(o);
 
-		for (j = 0;j < LIST_NUM(e->LangList);j++)
-		{
-			char *v = LIST_DATA(e->LangList, j);
-
-			if (StrCmpi(v, str) == 0)
-			{
-				return e;
-			}
-		}
 	}
 
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-		UINT j;
-
-		for (j = 0;j < LIST_NUM(e->LangList);j++)
-		{
-			char *v = LIST_DATA(e->LangList, j);
-
-			if (StartWith(str, v) || StartWith(v, str))
-			{
-				return e;
-			}
-		}
-	}
-
-	ret = GetBestLangByName(o, "en");
-
-	return ret;
-}
-
-// Search for the best language from LCID
-LANGLIST *GetBestLangByLcid(LIST *o, UINT lcid)
-{
-	LANGLIST *ret;
-	UINT i;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (IsIntInList(e->LcidList, lcid))
-		{
-			return e;
-		}
-	}
-
-	ret = GetBestLangByName(o, "en");
-
-	return ret;
-}
-
-// Search for the best language from the name
-LANGLIST *GetBestLangByName(LIST *o, char *name)
-{
-	UINT i;
-	LANGLIST *ret = NULL;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (StrCmpi(e->Name, name) == 0)
-		{
-			ret = e;
-			break;
-		}
-	}
-
-	if (ret != NULL)
-	{
-		return ret;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (StartWith(e->Name, name) || StartWith(name, e->Name))
-		{
-			ret = e;
-			break;
-		}
-	}
-
-	if (ret != NULL)
-	{
-		return ret;
-	}
-
-	return ret;
-}
-
-// Release the language list
-void FreeLangList(LIST *o)
-{
-	UINT i;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		FreeStrList(e->LangList);
-		ReleaseIntList(e->LcidList);
-
-		Free(e);
-	}
-
-	ReleaseList(o);
 }
 
 // Read the language list
-LIST *LoadLangList()
-{
-	LIST *o = NewListFast(NULL);
-	char *filename = LANGLIST_FILENAME;
-	BUF *b;
-
-#ifdef	OS_WIN32
-	if (MsIsWine())
-	{
-		filename = LANGLIST_FILENAME_WINE;
-	}
-#endif	// OS_WIN32
-
-	b = ReadDump(filename);
-	if (b == NULL)
-	{
-		return NULL;
-	}
-
-	while (true)
-	{
-		char *line = CfgReadNextLine(b);
-
-		if (line == NULL)
-		{
-			break;
-		}
-
-		Trim(line);
-
-		if (IsEmptyStr(line) == false && StartWith(line, "#") == false)
-		{
-			TOKEN_LIST *t = ParseToken(line, "\t ");
-			if (t != NULL)
-			{
-				if (t->NumTokens == 6)
-				{
-					LANGLIST *e = ZeroMalloc(sizeof(LANGLIST));
-					TOKEN_LIST *t2;
-
-					e->Id = ToInt(t->Token[0]);
-					StrCpy(e->Name, sizeof(e->Name), t->Token[1]);
-					Utf8ToUni(e->TitleEnglish, sizeof(e->TitleEnglish), t->Token[2], StrLen(t->Token[2]));
-					Utf8ToUni(e->TitleLocal, sizeof(e->TitleLocal), t->Token[3], StrLen(t->Token[3]));
-
-					UniReplaceStrEx(e->TitleEnglish, sizeof(e->TitleEnglish), e->TitleEnglish,
-						L"_", L" ", true);
-
-					UniReplaceStrEx(e->TitleLocal, sizeof(e->TitleLocal), e->TitleLocal,
-						L"_", L" ", true);
-
-					e->LcidList = NewIntList(false);
-
-					t2 = ParseToken(t->Token[4], ",");
-					if (t2 != NULL)
-					{
-						UINT i;
-
-						for (i = 0;i < t2->NumTokens;i++)
-						{
-							UINT id = ToInt(t2->Token[i]);
-
-							AddIntDistinct(e->LcidList, id);
-						}
-
-						FreeToken(t2);
-					}
-
-					e->LangList = NewListFast(NULL);
-
-					t2 = ParseToken(t->Token[5], ",");
-					if (t2 != NULL)
-					{
-						UINT i;
-
-						for (i = 0;i < t2->NumTokens;i++)
-						{
-							Add(e->LangList, CopyStr(t2->Token[i]));
-						}
-
-						FreeToken(t2);
-					}
-
-					Add(o, e);
-				}
-
-				FreeToken(t);
-			}
-		}
-
-		Free(line);
-	}
-
-	FreeBuf(b);
-
-	return o;
-}
-
+//LIST *LoadLangList()
+//{
+//	LIST *o = NewListFast(NULL);
+//	char *filename = LANGLIST_FILENAME;
+//	BUF *b;
+//
+//#ifdef	OS_WIN32
+//	if (MsIsWine())
+//	{
+//		filename = LANGLIST_FILENAME_WINE;
+//	}
+//#endif	// OS_WIN32
+//
+//	b = ReadDump(filename);
+//	if (b == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//	while (true)
+//	{
+//		char *line = CfgReadNextLine(b);
+//
+//		if (line == NULL)
+//		{
+//			break;
+//		}
+//
+//		Trim(line);
+//
+//		if (IsEmptyStr(line) == false && StartWith(line, "#") == false)
+//		{
+//			TOKEN_LIST *t = ParseToken(line, "\t ");
+//			if (t != NULL)
+//			{
+//				if (t->NumTokens == 6)
+//				{
+//					LANGLIST *e = ZeroMalloc(sizeof(LANGLIST));
+//					TOKEN_LIST *t2;
+//
+//					e->Id = ToInt(t->Token[0]);
+//					StrCpy(e->Name, sizeof(e->Name), t->Token[1]);
+//					Utf8ToUni(e->TitleEnglish, sizeof(e->TitleEnglish), t->Token[2], StrLen(t->Token[2]));
+//					Utf8ToUni(e->TitleLocal, sizeof(e->TitleLocal), t->Token[3], StrLen(t->Token[3]));
+//
+//					UniReplaceStrEx(e->TitleEnglish, sizeof(e->TitleEnglish), e->TitleEnglish,
+//						L"_", L" ", true);
+//
+//					UniReplaceStrEx(e->TitleLocal, sizeof(e->TitleLocal), e->TitleLocal,
+//						L"_", L" ", true);
+//
+//					e->LcidList = NewIntList(false);
+//
+//					t2 = ParseToken(t->Token[4], ",");
+//					if (t2 != NULL)
+//					{
+//						UINT i;
+//
+//						for (i = 0;i < t2->NumTokens;i++)
+//						{
+//							UINT id = ToInt(t2->Token[i]);
+//
+//							AddIntDistinct(e->LcidList, id);
+//						}
+//
+//						FreeToken(t2);
+//					}
+//
+//					e->LangList = NewListFast(NULL);
+//
+//					t2 = ParseToken(t->Token[5], ",");
+//					if (t2 != NULL)
+//					{
+//						UINT i;
+//
+//						for (i = 0;i < t2->NumTokens;i++)
+//						{
+//							Add(e->LangList, CopyStr(t2->Token[i]));
+//						}
+//
+//						FreeToken(t2);
+//					}
+//
+//					Add(o, e);
+//				}
+//
+//				FreeToken(t);
+//			}
+//		}
+//
+//		Free(line);
+//	}
+//
+//	FreeBuf(b);
+//
+//	return o;
+//}
+//
 // Get an error string in Unicode
 wchar_t *GetUniErrorStr(UINT err)
 {
@@ -1184,204 +819,204 @@ bool LoadTableFromBuf(BUF *b)
 	return true;
 }
 
-// Generate the Unicode string cache file name
-void GenerateUnicodeCacheFileName(wchar_t *name, UINT size, wchar_t *strfilename, UINT strfilesize, UCHAR *filehash)
-{
-	wchar_t tmp[MAX_SIZE];
-	wchar_t hashstr[64];
-	wchar_t hashtemp[MAX_SIZE];
-	wchar_t exe[MAX_SIZE];
-	UCHAR hash[SHA1_SIZE];
-	// Validate arguments
-	if (name == NULL || strfilename == NULL || filehash == NULL)
-	{
-		return;
-	}
-
-	GetExeDirW(exe, sizeof(exe));
-	UniStrCpy(hashtemp, sizeof(hashtemp), strfilename);
-	BinToStrW(tmp, sizeof(tmp), filehash, MD5_SIZE);
-	UniStrCat(hashtemp, sizeof(hashtemp), tmp);
-	UniStrCat(hashtemp, sizeof(hashtemp), exe);
-	UniStrLower(hashtemp);
-
-	Hash(hash, hashtemp, UniStrLen(hashtemp) * sizeof(wchar_t), true);
-	BinToStrW(hashstr, sizeof(hashstr), hash, 4);
-	UniFormat(tmp, sizeof(tmp), UNICODE_CACHE_FILE, hashstr);
-	UniStrLower(tmp);
-
-#ifndef	OS_WIN32
-	UniStrCpy(exe, sizeof(exe), L"/tmp");
-#else	// OS_WIN32
-	StrToUni(exe, sizeof(exe), MsGetTempDir());
-#endif	// OS_WIN32
-
-	UniFormat(name, size, L"%s/%s", exe, tmp);
-	NormalizePathW(name, size, name);
-}
-
-// Save the Unicode cache
-void SaveUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
-{
-	UNICODE_CACHE c;
-	BUF *b;
-	UINT i;
-	IO *io;
-	wchar_t name[MAX_PATH];
-	UCHAR binhash[MD5_SIZE];
-	// Validate arguments
-	if (strfilename == NULL || hash == NULL)
-	{
-		return;
-	}
-
-	Zero(&c, sizeof(c));
-	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
-	c.StrFileSize = strfilesize;
-	GetMachineName(c.MachineName, sizeof(c.MachineName));
-	c.OsType = GetOsInfo()->OsType;
-	Copy(c.hash, hash, MD5_SIZE);
-
-#ifdef	OS_UNIX
-	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
-#else	// OS_UNIX
-	{
-		UINT id = MsGetThreadLocale();
-		Copy(c.CharSet, &id, sizeof(id));
-	}
-#endif	// OS_UNIX
-
-	b = NewBuf();
-	WriteBuf(b, &c, sizeof(c));
-
-	WriteBufInt(b, LIST_NUM(TableList));
-	for (i = 0;i < LIST_NUM(TableList);i++)
-	{
-		TABLE *t = LIST_DATA(TableList, i);
-		WriteBufInt(b, StrLen(t->name));
-		WriteBuf(b, t->name, StrLen(t->name));
-		WriteBufInt(b, StrLen(t->str));
-		WriteBuf(b, t->str, StrLen(t->str));
-		WriteBufInt(b, UniStrLen(t->unistr));
-		WriteBuf(b, t->unistr, UniStrLen(t->unistr) * sizeof(wchar_t));
-	}
-
-	Hash(binhash, b->Buf, b->Size, false);
-	WriteBuf(b, binhash, MD5_SIZE);
-
-	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
-
-	io = FileCreateW(name);
-	if (io != NULL)
-	{
-		SeekBuf(b, 0, 0);
-		BufToFile(io, b);
-		FileClose(io);
-	}
-
-	FreeBuf(b);
-}
-
-// Reading the Unicode cache
-bool LoadUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
-{
-	UNICODE_CACHE c, t;
-	BUF *b;
-	UINT i, num;
-	IO *io;
-	wchar_t name[MAX_PATH];
-	UCHAR binhash[MD5_SIZE];
-	UCHAR binhash_2[MD5_SIZE];
-	// Validate arguments
-	if (strfilename == NULL || hash == NULL)
-	{
-		return false;
-	}
-
-	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
-
-	io = FileOpenW(name, false);
-	if (io == NULL)
-	{
-		return false;
-	}
-
-	b = FileToBuf(io);
-	if (b == NULL)
-	{
-		FileClose(io);
-		return false;
-	}
-
-	SeekBuf(b, 0, 0);
-	FileClose(io);
-
-	Hash(binhash, b->Buf, b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0, false);
-	Copy(binhash_2, ((UCHAR *)b->Buf) + (b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0), MD5_SIZE);
-	if (Cmp(binhash, binhash_2, MD5_SIZE) != 0)
-	{
-		FreeBuf(b);
-		return false;
-	}
-
-	Zero(&c, sizeof(c));
-	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
-	c.StrFileSize = strfilesize;
-	DisableNetworkNameCache();
-	GetMachineName(c.MachineName, sizeof(c.MachineName));
-	EnableNetworkNameCache();
-	c.OsType = GetOsInfo()->OsType;
-	Copy(c.hash, hash, MD5_SIZE);
-
-#ifdef	OS_UNIX
-	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
-#else	// OS_UNIX
-	{
-		UINT id = MsGetThreadLocale();
-		Copy(c.CharSet, &id, sizeof(id));
-	}
-#endif	// OS_UNIX
-
-	Zero(&t, sizeof(t));
-	ReadBuf(b, &t, sizeof(t));
-
-	if (Cmp(&c, &t, sizeof(UNICODE_CACHE)) != 0)
-	{
-		FreeBuf(b);
-		return false;
-	}
-
-	num = ReadBufInt(b);
-
-	FreeTable();
-	TableList = NewList(CmpTableName);
-
-	for (i = 0;i < num;i++)
-	{
-		UINT len;
-		TABLE *t = ZeroMalloc(sizeof(TABLE));
-
-		len = ReadBufInt(b);
-		t->name = ZeroMalloc(len + 1);
-		ReadBuf(b, t->name, len);
-
-		len = ReadBufInt(b);
-		t->str = ZeroMalloc(len + 1);
-		ReadBuf(b, t->str, len);
-
-		len = ReadBufInt(b);
-		t->unistr = ZeroMalloc((len + 1) * sizeof(wchar_t));
-		ReadBuf(b, t->unistr, len * sizeof(wchar_t));
-
-		Add(TableList, t);
-	}
-
-	FreeBuf(b);
-
-	Sort(TableList);
-
-	return true;
-}
+//// Generate the Unicode string cache file name
+//void GenerateUnicodeCacheFileName(wchar_t *name, UINT size, wchar_t *strfilename, UINT strfilesize, UCHAR *filehash)
+//{
+//	wchar_t tmp[MAX_SIZE];
+//	wchar_t hashstr[64];
+//	wchar_t hashtemp[MAX_SIZE];
+//	wchar_t exe[MAX_SIZE];
+//	UCHAR hash[SHA1_SIZE];
+//	// Validate arguments
+//	if (name == NULL || strfilename == NULL || filehash == NULL)
+//	{
+//		return;
+//	}
+//
+//	GetExeDirW(exe, sizeof(exe));
+//	UniStrCpy(hashtemp, sizeof(hashtemp), strfilename);
+//	BinToStrW(tmp, sizeof(tmp), filehash, MD5_SIZE);
+//	UniStrCat(hashtemp, sizeof(hashtemp), tmp);
+//	UniStrCat(hashtemp, sizeof(hashtemp), exe);
+//	UniStrLower(hashtemp);
+//
+//	Hash(hash, hashtemp, UniStrLen(hashtemp) * sizeof(wchar_t), true);
+//	BinToStrW(hashstr, sizeof(hashstr), hash, 4);
+//	UniFormat(tmp, sizeof(tmp), UNICODE_CACHE_FILE, hashstr);
+//	UniStrLower(tmp);
+//
+//#ifndef	OS_WIN32
+//	UniStrCpy(exe, sizeof(exe), L"/tmp");
+//#else	// OS_WIN32
+//	StrToUni(exe, sizeof(exe), MsGetTempDir());
+//#endif	// OS_WIN32
+//
+//	UniFormat(name, size, L"%s/%s", exe, tmp);
+//	NormalizePathW(name, size, name);
+//}
+//
+//// Save the Unicode cache
+//void SaveUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
+//{
+//	UNICODE_CACHE c;
+//	BUF *b;
+//	UINT i;
+//	IO *io;
+//	wchar_t name[MAX_PATH];
+//	UCHAR binhash[MD5_SIZE];
+//	// Validate arguments
+//	if (strfilename == NULL || hash == NULL)
+//	{
+//		return;
+//	}
+//
+//	Zero(&c, sizeof(c));
+//	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
+//	c.StrFileSize = strfilesize;
+//	GetMachineName(c.MachineName, sizeof(c.MachineName));
+//	c.OsType = GetOsInfo()->OsType;
+//	Copy(c.hash, hash, MD5_SIZE);
+//
+//#ifdef	OS_UNIX
+//	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
+//#else	// OS_UNIX
+//	{
+//		UINT id = MsGetThreadLocale();
+//		Copy(c.CharSet, &id, sizeof(id));
+//	}
+//#endif	// OS_UNIX
+//
+//	b = NewBuf();
+//	WriteBuf(b, &c, sizeof(c));
+//
+//	WriteBufInt(b, LIST_NUM(TableList));
+//	for (i = 0;i < LIST_NUM(TableList);i++)
+//	{
+//		TABLE *t = LIST_DATA(TableList, i);
+//		WriteBufInt(b, StrLen(t->name));
+//		WriteBuf(b, t->name, StrLen(t->name));
+//		WriteBufInt(b, StrLen(t->str));
+//		WriteBuf(b, t->str, StrLen(t->str));
+//		WriteBufInt(b, UniStrLen(t->unistr));
+//		WriteBuf(b, t->unistr, UniStrLen(t->unistr) * sizeof(wchar_t));
+//	}
+//
+//	Hash(binhash, b->Buf, b->Size, false);
+//	WriteBuf(b, binhash, MD5_SIZE);
+//
+//	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
+//
+//	io = FileCreateW(name);
+//	if (io != NULL)
+//	{
+//		SeekBuf(b, 0, 0);
+//		BufToFile(io, b);
+//		FileClose(io);
+//	}
+//
+//	FreeBuf(b);
+//}
+//
+//// Reading the Unicode cache
+//bool LoadUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
+//{
+//	UNICODE_CACHE c, t;
+//	BUF *b;
+//	UINT i, num;
+//	IO *io;
+//	wchar_t name[MAX_PATH];
+//	UCHAR binhash[MD5_SIZE];
+//	UCHAR binhash_2[MD5_SIZE];
+//	// Validate arguments
+//	if (strfilename == NULL || hash == NULL)
+//	{
+//		return false;
+//	}
+//
+//	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
+//
+//	io = FileOpenW(name, false);
+//	if (io == NULL)
+//	{
+//		return false;
+//	}
+//
+//	b = FileToBuf(io);
+//	if (b == NULL)
+//	{
+//		FileClose(io);
+//		return false;
+//	}
+//
+//	SeekBuf(b, 0, 0);
+//	FileClose(io);
+//
+//	Hash(binhash, b->Buf, b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0, false);
+//	Copy(binhash_2, ((UCHAR *)b->Buf) + (b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0), MD5_SIZE);
+//	if (Cmp(binhash, binhash_2, MD5_SIZE) != 0)
+//	{
+//		FreeBuf(b);
+//		return false;
+//	}
+//
+//	Zero(&c, sizeof(c));
+//	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
+//	c.StrFileSize = strfilesize;
+//	DisableNetworkNameCache();
+//	GetMachineName(c.MachineName, sizeof(c.MachineName));
+//	EnableNetworkNameCache();
+//	c.OsType = GetOsInfo()->OsType;
+//	Copy(c.hash, hash, MD5_SIZE);
+//
+//#ifdef	OS_UNIX
+//	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
+//#else	// OS_UNIX
+//	{
+//		UINT id = MsGetThreadLocale();
+//		Copy(c.CharSet, &id, sizeof(id));
+//	}
+//#endif	// OS_UNIX
+//
+//	Zero(&t, sizeof(t));
+//	ReadBuf(b, &t, sizeof(t));
+//
+//	if (Cmp(&c, &t, sizeof(UNICODE_CACHE)) != 0)
+//	{
+//		FreeBuf(b);
+//		return false;
+//	}
+//
+//	num = ReadBufInt(b);
+//
+//	FreeTable();
+//	TableList = NewList(CmpTableName);
+//
+//	for (i = 0;i < num;i++)
+//	{
+//		UINT len;
+//		TABLE *t = ZeroMalloc(sizeof(TABLE));
+//
+//		len = ReadBufInt(b);
+//		t->name = ZeroMalloc(len + 1);
+//		ReadBuf(b, t->name, len);
+//
+//		len = ReadBufInt(b);
+//		t->str = ZeroMalloc(len + 1);
+//		ReadBuf(b, t->str, len);
+//
+//		len = ReadBufInt(b);
+//		t->unistr = ZeroMalloc((len + 1) * sizeof(wchar_t));
+//		ReadBuf(b, t->unistr, len * sizeof(wchar_t));
+//
+//		Add(TableList, t);
+//	}
+//
+//	FreeBuf(b);
+//
+//	Sort(TableList);
+//
+//	return true;
+//}
 
 // Read the string table
 bool LoadTableMain(wchar_t *filename)
@@ -1421,22 +1056,22 @@ bool LoadTableMain(wchar_t *filename)
 
 	Hash(hash, b->Buf, b->Size, false);
 
-	if (LoadUnicodeCache(filename, b->Size, hash) == false)
-	{
+//	if (LoadUnicodeCache(filename, b->Size, hash) == false)
+//	{
 		if (LoadTableFromBuf(b) == false)
 		{
 			FreeBuf(b);
 			return false;
 		}
 
-		SaveUnicodeCache(filename, b->Size, hash);
-
-		//Debug("Unicode Source: strtable.stb\n");
-	}
-	else
-	{
-		//Debug("Unicode Source: unicode_cache\n");
-	}
+//		SaveUnicodeCache(filename, b->Size, hash);
+//
+//		//Debug("Unicode Source: strtable.stb\n");
+//	}
+//	else
+//	{
+//		//Debug("Unicode Source: unicode_cache\n");
+//	}
 
 	FreeBuf(b);
 
diff --git a/src/Mayaqua/Table.h b/src/Mayaqua/Table.h
index 9de294a..fae6d01 100644
--- a/src/Mayaqua/Table.h
+++ b/src/Mayaqua/Table.h
@@ -114,18 +114,18 @@
 #ifndef	TABLE_H
 #define	TABLE_H
 
-#define	UNICODE_CACHE_FILE		L".unicode_cache_%s.dat"
-
-#define	LANGLIST_FILENAME		"|languages.txt"
-#define	LANGLIST_FILENAME_WINE	"|languages_wine.txt"
-
-#define	LANG_CONFIG_FILENAME	L"@lang.config"
-#define	LANG_CONFIG_TEMPLETE	"|lang.config"
-
-// Language constant
-#define SE_LANG_JAPANESE			0	// Japanese
-#define SE_LANG_ENGLISH				1	// English
-#define SE_LANG_CHINESE_ZH			2	// Simplified Chinese
+//#define	UNICODE_CACHE_FILE		L".unicode_cache_%s.dat"
+//
+//#define	LANGLIST_FILENAME		"|languages.txt"
+//#define	LANGLIST_FILENAME_WINE	"|languages_wine.txt"
+//
+//#define	LANG_CONFIG_FILENAME	L"@lang.config"
+//#define	LANG_CONFIG_TEMPLETE	"|lang.config"
+//
+//// Language constant
+//#define SE_LANG_JAPANESE			0	// Japanese
+//#define SE_LANG_ENGLISH				1	// English
+//#define SE_LANG_CHINESE_ZH			2	// Simplified Chinese
 
 
 // String table
diff --git a/src/makefiles/linux_32bit.mak b/src/makefiles/linux_32bit.mak
index 3bad26e..8f15957 100644
--- a/src/makefiles/linux_32bit.mak
+++ b/src/makefiles/linux_32bit.mak
@@ -49,10 +49,10 @@ endif
 
 # Files
 HEADERS_MAYAQUA=src/Mayaqua/Cfg.h src/Mayaqua/cryptoki.h src/Mayaqua/Encrypt.h src/Mayaqua/FileIO.h src/Mayaqua/intelaes/iaesni.h src/Mayaqua/Internat.h src/Mayaqua/Kernel.h src/Mayaqua/Mayaqua.h src/Mayaqua/MayaType.h src/Mayaqua/Memory.h src/Mayaqua/Network.h src/Mayaqua/Object.h src/Mayaqua/OS.h src/Mayaqua/Pack.h src/Mayaqua/pkcs11.h src/Mayaqua/pkcs11f.h src/Mayaqua/pkcs11t.h src/Mayaqua/Secure.h src/Mayaqua/Str.h src/Mayaqua/Table.h src/Mayaqua/TcpIp.h src/Mayaqua/Tick64.h src/Mayaqua/Tracking.h src/Mayaqua/TunTap.h src/Mayaqua/Unix.h src/Mayaqua/zlib/zconf.h src/Mayaqua/zlib/zlib.h
-HEADERS_CEDAR=src/Cedar/Account.h src/Cedar/Admin.h src/Cedar/AzureClient.h src/Cedar/AzureServer.h src/Cedar/Bridge.h src/Cedar/BridgeUnix.h src/Cedar/Cedar.h src/Cedar/CedarPch.h src/Cedar/CedarType.h src/Cedar/Client.h src/Cedar/Command.h src/Cedar/Connection.h src/Cedar/Console.h src/Cedar/Database.h src/Cedar/DDNS.h src/Cedar/EtherLog.h src/Cedar/Hub.h src/Cedar/Interop_OpenVPN.h src/Cedar/Interop_SSTP.h src/Cedar/IPsec.h src/Cedar/IPsec_EtherIP.h src/Cedar/IPsec_IKE.h src/Cedar/IPsec_IkePacket.h src/Cedar/IPsec_IPC.h src/Cedar/IPsec_L2TP.h src/Cedar/IPsec_PPP.h src/Cedar/Layer3.h src/Cedar/Link.h src/Cedar/Listener.h src/Cedar/Logging.h src/Cedar/Nat.h src/Cedar/NativeStack.h src/Cedar/netcfgn.h src/Cedar/netcfgx.h src/Cedar/NullLan.h src/Cedar/Protocol.h src/Cedar/Radius.h src/Cedar/Remote.h src/Cedar/Sam.h src/Cedar/SecureInfo.h src/Cedar/SecureNAT.h src/Cedar/SeLowUser.h src/Cedar/Server.h src/Cedar/Session.h src/Cedar/UdpAccel.h src/Cedar/VG.h src/Cedar/Virtual.h src/Cedar/VLan.h src/Cedar/VLanUnix.h src/Cedar/WaterMark.h src/Cedar/WebUI.h src/Cedar/winpcap/bittypes.h src/Cedar/winpcap/bucket_lookup.h src/Cedar/winpcap/count_packets.h src/Cedar/winpcap/Devioctl.h src/Cedar/winpcap/Gnuc.h src/Cedar/winpcap/ip6_misc.h src/Cedar/winpcap/memory_t.h src/Cedar/winpcap/normal_lookup.h src/Cedar/winpcap/Ntddndis.h src/Cedar/winpcap/Ntddpack.h src/Cedar/winpcap/Packet32.h src/Cedar/winpcap/pcap.h src/Cedar/winpcap/pcap-bpf.h src/Cedar/winpcap/pcap-int.h src/Cedar/winpcap/pcap-stdinc.h src/Cedar/winpcap/pthread.h src/Cedar/winpcap/remote-ext.h src/Cedar/winpcap/sched.h src/Cedar/winpcap/semaphore.h src/Cedar/winpcap/tcp_session.h src/Cedar/winpcap/time_calls.h src/Cedar/winpcap/tme.h src/Cedar/winpcap/Win32-Extensions.h src/Cedar/Wpc.h
+HEADERS_CEDAR=src/Cedar/Account.h src/Cedar/Admin.h src/Cedar/AzureClient.h src/Cedar/AzureServer.h src/Cedar/Bridge.h src/Cedar/BridgeUnix.h src/Cedar/Cedar.h src/Cedar/CedarPch.h src/Cedar/CedarType.h src/Cedar/Client.h src/Cedar/Command.h src/Cedar/Connection.h src/Cedar/Console.h src/Cedar/Database.h src/Cedar/DDNS.h src/Cedar/EtherLog.h src/Cedar/Hub.h src/Cedar/Interop_OpenVPN.h src/Cedar/Interop_SSTP.h src/Cedar/IPsec.h src/Cedar/IPsec_EtherIP.h src/Cedar/IPsec_IKE.h src/Cedar/IPsec_IkePacket.h src/Cedar/IPsec_IPC.h src/Cedar/IPsec_L2TP.h src/Cedar/IPsec_PPP.h src/Cedar/Layer3.h src/Cedar/Link.h src/Cedar/Listener.h src/Cedar/Logging.h src/Cedar/Nat.h src/Cedar/NativeStack.h src/Cedar/netcfgn.h src/Cedar/netcfgx.h src/Cedar/NullLan.h src/Cedar/Protocol.h src/Cedar/Radius.h src/Cedar/Remote.h src/Cedar/Sam.h src/Cedar/SecureInfo.h src/Cedar/SecureNAT.h src/Cedar/SeLowUser.h src/Cedar/Server.h src/Cedar/Session.h src/Cedar/UdpAccel.h src/Cedar/VG.h src/Cedar/Virtual.h src/Cedar/VLan.h src/Cedar/VLanUnix.h src/Cedar/WaterMark.h src/Cedar/winpcap/bittypes.h src/Cedar/winpcap/bucket_lookup.h src/Cedar/winpcap/count_packets.h src/Cedar/winpcap/Devioctl.h src/Cedar/winpcap/Gnuc.h src/Cedar/winpcap/ip6_misc.h src/Cedar/winpcap/memory_t.h src/Cedar/winpcap/normal_lookup.h src/Cedar/winpcap/Ntddndis.h src/Cedar/winpcap/Ntddpack.h src/Cedar/winpcap/Packet32.h src/Cedar/winpcap/pcap.h src/Cedar/winpcap/pcap-bpf.h src/Cedar/winpcap/pcap-int.h src/Cedar/winpcap/pcap-stdinc.h src/Cedar/winpcap/pthread.h src/Cedar/winpcap/remote-ext.h src/Cedar/winpcap/sched.h src/Cedar/winpcap/semaphore.h src/Cedar/winpcap/tcp_session.h src/Cedar/winpcap/time_calls.h src/Cedar/winpcap/tme.h src/Cedar/winpcap/Win32-Extensions.h src/Cedar/Wpc.h
 OBJECTS_MAYAQUA=tmp/objs/Mayaqua/Cfg.o tmp/objs/Mayaqua/Encrypt.o tmp/objs/Mayaqua/FileIO.o tmp/objs/Mayaqua/Internat.o tmp/objs/Mayaqua/Kernel.o tmp/objs/Mayaqua/Mayaqua.o tmp/objs/Mayaqua/Memory.o tmp/objs/Mayaqua/Network.o tmp/objs/Mayaqua/Object.o tmp/objs/Mayaqua/OS.o tmp/objs/Mayaqua/Pack.o tmp/objs/Mayaqua/Secure.o tmp/objs/Mayaqua/Str.o tmp/objs/Mayaqua/Table.o tmp/objs/Mayaqua/TcpIp.o tmp/objs/Mayaqua/Tick64.o tmp/objs/Mayaqua/Tracking.o tmp/objs/Mayaqua/Unix.o
-OBJECTS_CEDAR=tmp/objs/Cedar/Account.o tmp/objs/Cedar/Admin.o tmp/objs/Cedar/AzureClient.o tmp/objs/Cedar/AzureServer.o tmp/objs/Cedar/Bridge.o tmp/objs/Cedar/BridgeUnix.o tmp/objs/Cedar/Cedar.o tmp/objs/Cedar/CedarPch.o tmp/objs/Cedar/Client.o tmp/objs/Cedar/Command.o tmp/objs/Cedar/Connection.o tmp/objs/Cedar/Console.o tmp/objs/Cedar/Database.o tmp/objs/Cedar/DDNS.o tmp/objs/Cedar/EtherLog.o tmp/objs/Cedar/Hub.o tmp/objs/Cedar/Interop_OpenVPN.o tmp/objs/Cedar/Interop_SSTP.o tmp/objs/Cedar/IPsec.o tmp/objs/Cedar/IPsec_EtherIP.o tmp/objs/Cedar/IPsec_IKE.o tmp/objs/Cedar/IPsec_IkePacket.o tmp/objs/Cedar/IPsec_IPC.o tmp/objs/Cedar/IPsec_L2TP.o tmp/objs/Cedar/IPsec_PPP.o tmp/objs/Cedar/Layer3.o tmp/objs/Cedar/Link.o tmp/objs/Cedar/Listener.o tmp/objs/Cedar/Logging.o tmp/objs/Cedar/Nat.o tmp/objs/Cedar/NativeStack.o tmp/objs/Cedar/NullLan.o tmp/objs/Cedar/Protocol.o tmp/objs/Cedar/Radius.o tmp/objs/Cedar/Remote.o tmp/objs/Cedar/Sam.o tmp/objs/Cedar/SecureInfo.o tmp/objs/Cedar/SecureNAT.o tmp/objs/Cedar/SeLowUser.o tmp/objs/Cedar/Server.o tmp/objs/Cedar/Session.o tmp/objs/Cedar/UdpAccel.o tmp/objs/Cedar/VG.o tmp/objs/Cedar/Virtual.o tmp/objs/Cedar/VLan.o tmp/objs/Cedar/VLanUnix.o tmp/objs/Cedar/WaterMark.o tmp/objs/Cedar/WebUI.o tmp/objs/Cedar/Wpc.o
-HAMCORE_FILES=src/bin/hamcore/authors.txt src/bin/hamcore/backup_dir_readme.txt src/bin/hamcore/empty.config src/bin/hamcore/empty_sevpnclient.config src/bin/hamcore/eula.txt src/bin/hamcore/install_src.dat src/bin/hamcore/lang.config src/bin/hamcore/languages.txt src/bin/hamcore/languages_wine.txt src/bin/hamcore/legal.txt src/bin/hamcore/openvpn_readme.pdf src/bin/hamcore/openvpn_readme.txt src/bin/hamcore/openvpn_sample.ovpn src/bin/hamcore/root_certs.dat src/bin/hamcore/SOURCES_OF_BINARY_FILES.TXT src/bin/hamcore/strtable_cn.stb src/bin/hamcore/strtable_en.stb src/bin/hamcore/strtable_ja.stb src/bin/hamcore/vpnweb_sample_cn.htm src/bin/hamcore/vpnweb_sample_en.htm src/bin/hamcore/vpnweb_sample_ja.htm src/bin/hamcore/warning_cn.txt src/bin/hamcore/warning_en.txt src/bin/hamcore/warning_ja.txt src/bin/hamcore/webui/cryptcom.cgi src/bin/hamcore/webui/edituser.cgi src/bin/hamcore/webui/error.cgi src/bin/hamcore/webui/hub.cgi src/bin/hamcore/webui/license.cgi src/bin/hamcore/webui/listener.cgi src/bin/hamcore/webui/localbridge.cgi src/bin/hamcore/webui/login.cgi src/bin/hamcore/webui/newhub.cgi src/bin/hamcore/webui/redirect.cgi src/bin/hamcore/webui/securenat.cgi src/bin/hamcore/webui/server.cgi src/bin/hamcore/webui/session.cgi src/bin/hamcore/webui/user.cgi src/bin/hamcore/webui/webui.css
+OBJECTS_CEDAR=tmp/objs/Cedar/Account.o tmp/objs/Cedar/Admin.o tmp/objs/Cedar/AzureClient.o tmp/objs/Cedar/AzureServer.o tmp/objs/Cedar/Bridge.o tmp/objs/Cedar/BridgeUnix.o tmp/objs/Cedar/Cedar.o tmp/objs/Cedar/CedarPch.o tmp/objs/Cedar/Client.o tmp/objs/Cedar/Command.o tmp/objs/Cedar/Connection.o tmp/objs/Cedar/Console.o tmp/objs/Cedar/Database.o tmp/objs/Cedar/DDNS.o tmp/objs/Cedar/EtherLog.o tmp/objs/Cedar/Hub.o tmp/objs/Cedar/Interop_OpenVPN.o tmp/objs/Cedar/Interop_SSTP.o tmp/objs/Cedar/IPsec.o tmp/objs/Cedar/IPsec_EtherIP.o tmp/objs/Cedar/IPsec_IKE.o tmp/objs/Cedar/IPsec_IkePacket.o tmp/objs/Cedar/IPsec_IPC.o tmp/objs/Cedar/IPsec_L2TP.o tmp/objs/Cedar/IPsec_PPP.o tmp/objs/Cedar/Layer3.o tmp/objs/Cedar/Link.o tmp/objs/Cedar/Listener.o tmp/objs/Cedar/Logging.o tmp/objs/Cedar/Nat.o tmp/objs/Cedar/NativeStack.o tmp/objs/Cedar/NullLan.o tmp/objs/Cedar/Protocol.o tmp/objs/Cedar/Radius.o tmp/objs/Cedar/Remote.o tmp/objs/Cedar/Sam.o tmp/objs/Cedar/SecureInfo.o tmp/objs/Cedar/SecureNAT.o tmp/objs/Cedar/SeLowUser.o tmp/objs/Cedar/Server.o tmp/objs/Cedar/Session.o tmp/objs/Cedar/UdpAccel.o tmp/objs/Cedar/Virtual.o tmp/objs/Cedar/VLan.o tmp/objs/Cedar/VLanUnix.o tmp/objs/Cedar/WaterMark.o tmp/objs/Cedar/Wpc.o
+HAMCORE_FILES=src/bin/hamcore/legal.txt src/bin/hamcore/openvpn_sample.ovpn src/bin/hamcore/root_certs.dat src/bin/hamcore/strtable_en.stb
 
 # Build Action
 default:	build
@@ -251,8 +251,8 @@ tmp/objs/Cedar/Session.o: src/Cedar/Session.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR
 tmp/objs/Cedar/UdpAccel.o: src/Cedar/UdpAccel.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/UdpAccel.c -o tmp/objs/Cedar/UdpAccel.o
 
-tmp/objs/Cedar/VG.o: src/Cedar/VG.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VG.c -o tmp/objs/Cedar/VG.o
+#tmp/objs/Cedar/VG.o: src/Cedar/VG.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
+#	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VG.c -o tmp/objs/Cedar/VG.o
 
 tmp/objs/Cedar/Virtual.o: src/Cedar/Virtual.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Virtual.c -o tmp/objs/Cedar/Virtual.o
@@ -266,8 +266,8 @@ tmp/objs/Cedar/VLanUnix.o: src/Cedar/VLanUnix.c $(HEADERS_MAYAQUA) $(HEADERS_CED
 tmp/objs/Cedar/WaterMark.o: src/Cedar/WaterMark.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WaterMark.c -o tmp/objs/Cedar/WaterMark.o
 
-tmp/objs/Cedar/WebUI.o: src/Cedar/WebUI.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WebUI.c -o tmp/objs/Cedar/WebUI.o
+#tmp/objs/Cedar/WebUI.o: src/Cedar/WebUI.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
+#	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WebUI.c -o tmp/objs/Cedar/WebUI.o
 
 tmp/objs/Cedar/Wpc.o: src/Cedar/Wpc.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Wpc.c -o tmp/objs/Cedar/Wpc.o
diff --git a/src/makefiles/linux_64bit.mak b/src/makefiles/linux_64bit.mak
index adea975..9a88aaf 100644
--- a/src/makefiles/linux_64bit.mak
+++ b/src/makefiles/linux_64bit.mak
@@ -49,10 +49,10 @@ endif
 
 # Files
 HEADERS_MAYAQUA=src/Mayaqua/Cfg.h src/Mayaqua/cryptoki.h src/Mayaqua/Encrypt.h src/Mayaqua/FileIO.h src/Mayaqua/intelaes/iaesni.h src/Mayaqua/Internat.h src/Mayaqua/Kernel.h src/Mayaqua/Mayaqua.h src/Mayaqua/MayaType.h src/Mayaqua/Memory.h src/Mayaqua/Network.h src/Mayaqua/Object.h src/Mayaqua/OS.h src/Mayaqua/Pack.h src/Mayaqua/pkcs11.h src/Mayaqua/pkcs11f.h src/Mayaqua/pkcs11t.h src/Mayaqua/Secure.h src/Mayaqua/Str.h src/Mayaqua/Table.h src/Mayaqua/TcpIp.h src/Mayaqua/Tick64.h src/Mayaqua/Tracking.h src/Mayaqua/TunTap.h src/Mayaqua/Unix.h src/Mayaqua/zlib/zconf.h src/Mayaqua/zlib/zlib.h
-HEADERS_CEDAR=src/Cedar/Account.h src/Cedar/Admin.h src/Cedar/AzureClient.h src/Cedar/AzureServer.h src/Cedar/Bridge.h src/Cedar/BridgeUnix.h src/Cedar/Cedar.h src/Cedar/CedarPch.h src/Cedar/CedarType.h src/Cedar/Client.h src/Cedar/Command.h src/Cedar/Connection.h src/Cedar/Console.h src/Cedar/Database.h src/Cedar/DDNS.h src/Cedar/EtherLog.h src/Cedar/Hub.h src/Cedar/Interop_OpenVPN.h src/Cedar/Interop_SSTP.h src/Cedar/IPsec.h src/Cedar/IPsec_EtherIP.h src/Cedar/IPsec_IKE.h src/Cedar/IPsec_IkePacket.h src/Cedar/IPsec_IPC.h src/Cedar/IPsec_L2TP.h src/Cedar/IPsec_PPP.h src/Cedar/Layer3.h src/Cedar/Link.h src/Cedar/Listener.h src/Cedar/Logging.h src/Cedar/Nat.h src/Cedar/NativeStack.h src/Cedar/netcfgn.h src/Cedar/netcfgx.h src/Cedar/NullLan.h src/Cedar/Protocol.h src/Cedar/Radius.h src/Cedar/Remote.h src/Cedar/Sam.h src/Cedar/SecureInfo.h src/Cedar/SecureNAT.h src/Cedar/SeLowUser.h src/Cedar/Server.h src/Cedar/Session.h src/Cedar/UdpAccel.h src/Cedar/VG.h src/Cedar/Virtual.h src/Cedar/VLan.h src/Cedar/VLanUnix.h src/Cedar/WaterMark.h src/Cedar/WebUI.h src/Cedar/winpcap/bittypes.h src/Cedar/winpcap/bucket_lookup.h src/Cedar/winpcap/count_packets.h src/Cedar/winpcap/Devioctl.h src/Cedar/winpcap/Gnuc.h src/Cedar/winpcap/ip6_misc.h src/Cedar/winpcap/memory_t.h src/Cedar/winpcap/normal_lookup.h src/Cedar/winpcap/Ntddndis.h src/Cedar/winpcap/Ntddpack.h src/Cedar/winpcap/Packet32.h src/Cedar/winpcap/pcap.h src/Cedar/winpcap/pcap-bpf.h src/Cedar/winpcap/pcap-int.h src/Cedar/winpcap/pcap-stdinc.h src/Cedar/winpcap/pthread.h src/Cedar/winpcap/remote-ext.h src/Cedar/winpcap/sched.h src/Cedar/winpcap/semaphore.h src/Cedar/winpcap/tcp_session.h src/Cedar/winpcap/time_calls.h src/Cedar/winpcap/tme.h src/Cedar/winpcap/Win32-Extensions.h src/Cedar/Wpc.h
+HEADERS_CEDAR=src/Cedar/Account.h src/Cedar/Admin.h src/Cedar/AzureClient.h src/Cedar/AzureServer.h src/Cedar/Bridge.h src/Cedar/BridgeUnix.h src/Cedar/Cedar.h src/Cedar/CedarPch.h src/Cedar/CedarType.h src/Cedar/Client.h src/Cedar/Command.h src/Cedar/Connection.h src/Cedar/Console.h src/Cedar/Database.h src/Cedar/DDNS.h src/Cedar/EtherLog.h src/Cedar/Hub.h src/Cedar/Interop_OpenVPN.h src/Cedar/Interop_SSTP.h src/Cedar/IPsec.h src/Cedar/IPsec_EtherIP.h src/Cedar/IPsec_IKE.h src/Cedar/IPsec_IkePacket.h src/Cedar/IPsec_IPC.h src/Cedar/IPsec_L2TP.h src/Cedar/IPsec_PPP.h src/Cedar/Layer3.h src/Cedar/Link.h src/Cedar/Listener.h src/Cedar/Logging.h src/Cedar/Nat.h src/Cedar/NativeStack.h src/Cedar/netcfgn.h src/Cedar/netcfgx.h src/Cedar/NullLan.h src/Cedar/Protocol.h src/Cedar/Radius.h src/Cedar/Remote.h src/Cedar/Sam.h src/Cedar/SecureInfo.h src/Cedar/SecureNAT.h src/Cedar/SeLowUser.h src/Cedar/Server.h src/Cedar/Session.h src/Cedar/UdpAccel.h src/Cedar/VG.h src/Cedar/Virtual.h src/Cedar/VLan.h src/Cedar/VLanUnix.h src/Cedar/WaterMark.h src/Cedar/winpcap/bittypes.h src/Cedar/winpcap/bucket_lookup.h src/Cedar/winpcap/count_packets.h src/Cedar/winpcap/Devioctl.h src/Cedar/winpcap/Gnuc.h src/Cedar/winpcap/ip6_misc.h src/Cedar/winpcap/memory_t.h src/Cedar/winpcap/normal_lookup.h src/Cedar/winpcap/Ntddndis.h src/Cedar/winpcap/Ntddpack.h src/Cedar/winpcap/Packet32.h src/Cedar/winpcap/pcap.h src/Cedar/winpcap/pcap-bpf.h src/Cedar/winpcap/pcap-int.h src/Cedar/winpcap/pcap-stdinc.h src/Cedar/winpcap/pthread.h src/Cedar/winpcap/remote-ext.h src/Cedar/winpcap/sched.h src/Cedar/winpcap/semaphore.h src/Cedar/winpcap/tcp_session.h src/Cedar/winpcap/time_calls.h src/Cedar/winpcap/tme.h src/Cedar/winpcap/Win32-Extensions.h src/Cedar/Wpc.h
 OBJECTS_MAYAQUA=tmp/objs/Mayaqua/Cfg.o tmp/objs/Mayaqua/Encrypt.o tmp/objs/Mayaqua/FileIO.o tmp/objs/Mayaqua/Internat.o tmp/objs/Mayaqua/Kernel.o tmp/objs/Mayaqua/Mayaqua.o tmp/objs/Mayaqua/Memory.o tmp/objs/Mayaqua/Network.o tmp/objs/Mayaqua/Object.o tmp/objs/Mayaqua/OS.o tmp/objs/Mayaqua/Pack.o tmp/objs/Mayaqua/Secure.o tmp/objs/Mayaqua/Str.o tmp/objs/Mayaqua/Table.o tmp/objs/Mayaqua/TcpIp.o tmp/objs/Mayaqua/Tick64.o tmp/objs/Mayaqua/Tracking.o tmp/objs/Mayaqua/Unix.o
-OBJECTS_CEDAR=tmp/objs/Cedar/Account.o tmp/objs/Cedar/Admin.o tmp/objs/Cedar/AzureClient.o tmp/objs/Cedar/AzureServer.o tmp/objs/Cedar/Bridge.o tmp/objs/Cedar/BridgeUnix.o tmp/objs/Cedar/Cedar.o tmp/objs/Cedar/CedarPch.o tmp/objs/Cedar/Client.o tmp/objs/Cedar/Command.o tmp/objs/Cedar/Connection.o tmp/objs/Cedar/Console.o tmp/objs/Cedar/Database.o tmp/objs/Cedar/DDNS.o tmp/objs/Cedar/EtherLog.o tmp/objs/Cedar/Hub.o tmp/objs/Cedar/Interop_OpenVPN.o tmp/objs/Cedar/Interop_SSTP.o tmp/objs/Cedar/IPsec.o tmp/objs/Cedar/IPsec_EtherIP.o tmp/objs/Cedar/IPsec_IKE.o tmp/objs/Cedar/IPsec_IkePacket.o tmp/objs/Cedar/IPsec_IPC.o tmp/objs/Cedar/IPsec_L2TP.o tmp/objs/Cedar/IPsec_PPP.o tmp/objs/Cedar/Layer3.o tmp/objs/Cedar/Link.o tmp/objs/Cedar/Listener.o tmp/objs/Cedar/Logging.o tmp/objs/Cedar/Nat.o tmp/objs/Cedar/NativeStack.o tmp/objs/Cedar/NullLan.o tmp/objs/Cedar/Protocol.o tmp/objs/Cedar/Radius.o tmp/objs/Cedar/Remote.o tmp/objs/Cedar/Sam.o tmp/objs/Cedar/SecureInfo.o tmp/objs/Cedar/SecureNAT.o tmp/objs/Cedar/SeLowUser.o tmp/objs/Cedar/Server.o tmp/objs/Cedar/Session.o tmp/objs/Cedar/UdpAccel.o tmp/objs/Cedar/VG.o tmp/objs/Cedar/Virtual.o tmp/objs/Cedar/VLan.o tmp/objs/Cedar/VLanUnix.o tmp/objs/Cedar/WaterMark.o tmp/objs/Cedar/WebUI.o tmp/objs/Cedar/Wpc.o
-HAMCORE_FILES=src/bin/hamcore/authors.txt src/bin/hamcore/backup_dir_readme.txt src/bin/hamcore/empty.config src/bin/hamcore/empty_sevpnclient.config src/bin/hamcore/eula.txt src/bin/hamcore/install_src.dat src/bin/hamcore/lang.config src/bin/hamcore/languages.txt src/bin/hamcore/languages_wine.txt src/bin/hamcore/legal.txt src/bin/hamcore/openvpn_readme.pdf src/bin/hamcore/openvpn_readme.txt src/bin/hamcore/openvpn_sample.ovpn src/bin/hamcore/root_certs.dat src/bin/hamcore/SOURCES_OF_BINARY_FILES.TXT src/bin/hamcore/strtable_cn.stb src/bin/hamcore/strtable_en.stb src/bin/hamcore/strtable_ja.stb src/bin/hamcore/vpnweb_sample_cn.htm src/bin/hamcore/vpnweb_sample_en.htm src/bin/hamcore/vpnweb_sample_ja.htm src/bin/hamcore/warning_cn.txt src/bin/hamcore/warning_en.txt src/bin/hamcore/warning_ja.txt src/bin/hamcore/webui/cryptcom.cgi src/bin/hamcore/webui/edituser.cgi src/bin/hamcore/webui/error.cgi src/bin/hamcore/webui/hub.cgi src/bin/hamcore/webui/license.cgi src/bin/hamcore/webui/listener.cgi src/bin/hamcore/webui/localbridge.cgi src/bin/hamcore/webui/login.cgi src/bin/hamcore/webui/newhub.cgi src/bin/hamcore/webui/redirect.cgi src/bin/hamcore/webui/securenat.cgi src/bin/hamcore/webui/server.cgi src/bin/hamcore/webui/session.cgi src/bin/hamcore/webui/user.cgi src/bin/hamcore/webui/webui.css
+OBJECTS_CEDAR=tmp/objs/Cedar/Account.o tmp/objs/Cedar/Admin.o tmp/objs/Cedar/AzureClient.o tmp/objs/Cedar/AzureServer.o tmp/objs/Cedar/Bridge.o tmp/objs/Cedar/BridgeUnix.o tmp/objs/Cedar/Cedar.o tmp/objs/Cedar/CedarPch.o tmp/objs/Cedar/Client.o tmp/objs/Cedar/Command.o tmp/objs/Cedar/Connection.o tmp/objs/Cedar/Console.o tmp/objs/Cedar/Database.o tmp/objs/Cedar/DDNS.o tmp/objs/Cedar/EtherLog.o tmp/objs/Cedar/Hub.o tmp/objs/Cedar/Interop_OpenVPN.o tmp/objs/Cedar/Interop_SSTP.o tmp/objs/Cedar/IPsec.o tmp/objs/Cedar/IPsec_EtherIP.o tmp/objs/Cedar/IPsec_IKE.o tmp/objs/Cedar/IPsec_IkePacket.o tmp/objs/Cedar/IPsec_IPC.o tmp/objs/Cedar/IPsec_L2TP.o tmp/objs/Cedar/IPsec_PPP.o tmp/objs/Cedar/Layer3.o tmp/objs/Cedar/Link.o tmp/objs/Cedar/Listener.o tmp/objs/Cedar/Logging.o tmp/objs/Cedar/Nat.o tmp/objs/Cedar/NativeStack.o tmp/objs/Cedar/NullLan.o tmp/objs/Cedar/Protocol.o tmp/objs/Cedar/Radius.o tmp/objs/Cedar/Remote.o tmp/objs/Cedar/Sam.o tmp/objs/Cedar/SecureInfo.o tmp/objs/Cedar/SecureNAT.o tmp/objs/Cedar/SeLowUser.o tmp/objs/Cedar/Server.o tmp/objs/Cedar/Session.o tmp/objs/Cedar/UdpAccel.o tmp/objs/Cedar/Virtual.o tmp/objs/Cedar/VLan.o tmp/objs/Cedar/VLanUnix.o tmp/objs/Cedar/WaterMark.o tmp/objs/Cedar/Wpc.o
+HAMCORE_FILES=src/bin/hamcore/legal.txt src/bin/hamcore/openvpn_sample.ovpn src/bin/hamcore/root_certs.dat src/bin/hamcore/strtable_en.stb
 
 # Build Action
 default:	build
@@ -251,8 +251,8 @@ tmp/objs/Cedar/Session.o: src/Cedar/Session.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR
 tmp/objs/Cedar/UdpAccel.o: src/Cedar/UdpAccel.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/UdpAccel.c -o tmp/objs/Cedar/UdpAccel.o
 
-tmp/objs/Cedar/VG.o: src/Cedar/VG.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VG.c -o tmp/objs/Cedar/VG.o
+#tmp/objs/Cedar/VG.o: src/Cedar/VG.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
+#	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VG.c -o tmp/objs/Cedar/VG.o
 
 tmp/objs/Cedar/Virtual.o: src/Cedar/Virtual.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Virtual.c -o tmp/objs/Cedar/Virtual.o
@@ -266,8 +266,8 @@ tmp/objs/Cedar/VLanUnix.o: src/Cedar/VLanUnix.c $(HEADERS_MAYAQUA) $(HEADERS_CED
 tmp/objs/Cedar/WaterMark.o: src/Cedar/WaterMark.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WaterMark.c -o tmp/objs/Cedar/WaterMark.o
 
-tmp/objs/Cedar/WebUI.o: src/Cedar/WebUI.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WebUI.c -o tmp/objs/Cedar/WebUI.o
+#tmp/objs/Cedar/WebUI.o: src/Cedar/WebUI.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
+#	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WebUI.c -o tmp/objs/Cedar/WebUI.o
 
 tmp/objs/Cedar/Wpc.o: src/Cedar/Wpc.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Wpc.c -o tmp/objs/Cedar/Wpc.o
diff --git a/src/vpnbridge/vpnbridge.c b/src/vpnbridge/vpnbridge.c
index 6e6d1c8..a0c095c 100644
--- a/src/vpnbridge/vpnbridge.c
+++ b/src/vpnbridge/vpnbridge.c
@@ -155,7 +155,7 @@ void vpnbridge_StopProcess()
 // WinMain function
 int vpnbridge_main(int argc, char *argv[])
 {
-	VgUseStaticLink();
+//	VgUseStaticLink();
 
 #ifdef	OS_WIN32
 	return MsService(GC_SVC_NAME_VPNBRIDGE, vpnbridge_StartProcess, vpnbridge_StopProcess, ICO_BRIDGE, argv[0]);
diff --git a/src/vpnserver/vpnserver.c b/src/vpnserver/vpnserver.c
index 908bb41..22172aa 100644
--- a/src/vpnserver/vpnserver.c
+++ b/src/vpnserver/vpnserver.c
@@ -155,7 +155,7 @@ void vpnserver_StopProcess()
 // WinMain function
 int vpnserver_main(int argc, char *argv[])
 {
-	VgUseStaticLink();
+//	VgUseStaticLink();
 
 #ifdef	OS_WIN32
 
-- 
1.9.1

